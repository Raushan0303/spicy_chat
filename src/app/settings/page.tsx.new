import { getKindeServerSession } from "@kinde-oss/kinde-auth-nextjs/server";
import { redirect } from "next/navigation";
import { DatabaseService } from "@/services/database.service";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { LogoutLink } from "@kinde-oss/kinde-auth-nextjs/components";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import Image from "next/image";
import { getUserChatbots } from "@/app/actions/chatbot";
import { ProfileImage } from "@/components/profile-image";

export default async function SettingsPage() {
  // Get the authenticated user from Kinde
  const { getUser, isAuthenticated } = getKindeServerSession();
  const authenticated = await isAuthenticated();

  // Redirect to login if not authenticated
  if (!authenticated) {
    redirect("/api/auth/login?post_login_redirect_url=/settings");
  }

  // Get the user from Kinde
  const kindeUser = await getUser();

  // Redirect if no user found
  if (!kindeUser || !kindeUser.id) {
    redirect("/auth/error?reason=no_user");
  }

  // Get the user from the database
  const dbUser = await DatabaseService.getUserById(kindeUser.id);

  // Get user's chatbots
  const userChatbotsResult = await getUserChatbots();
  const userChatbots = userChatbotsResult.success ? userChatbotsResult.chatbots || [] : [];

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white">
      <div className="container mx-auto py-8 px-4">
        <div className="flex flex-col md:flex-row gap-8">
          {/* Sidebar */}
          <div className="w-full md:w-64 flex-shrink-0">
            <div className="bg-gray-800/50 backdrop-blur-sm rounded-2xl p-6 sticky top-20">
              <div className="flex flex-col items-center mb-6">
                <div className="w-20 h-20 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center text-white text-2xl font-bold mb-3 overflow-hidden">
                  {kindeUser.picture ? (
                    <ProfileImage 
                      src={kindeUser.picture} 
                      alt={kindeUser.given_name || "User"} 
                      fallback={kindeUser.given_name?.charAt(0) || "U"}
                    />
                  ) : (
                    kindeUser.given_name?.charAt(0) || "U"
                  )}
                </div>
                <h2 className="text-xl font-semibold">
                  {kindeUser.given_name} {kindeUser.family_name}
                </h2>
                <p className="text-gray-400 text-sm">{kindeUser.email}</p>
              </div>
              
              <div className="space-y-2">
                <Link href="/settings" className="block w-full">
                  <Button variant="ghost" className="w-full justify-start bg-blue-600/20 text-blue-300 hover:bg-blue-600/30 hover:text-blue-200">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    </svg>
                    Settings
                  </Button>
                </Link>
                <Link href="/chatbots" className="block w-full">
                  <Button variant="ghost" className="w-full justify-start hover:bg-gray-700/50">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
                    </svg>
                    Chatbots
                  </Button>
                </Link>
                <Link href="/profile" className="block w-full">
                  <Button variant="ghost" className="w-full justify-start hover:bg-gray-700/50">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    Profile
                  </Button>
                </Link>
                <LogoutLink postLogoutRedirectURL="/" className="block w-full">
                  <Button variant="ghost" className="w-full justify-start text-red-400 hover:text-red-300 hover:bg-red-900/20">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                    </svg>
                    Sign Out
                  </Button>
                </LogoutLink>
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="flex-1">
            <h1 className="text-3xl font-bold mb-6 bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-purple-500">Settings</h1>
            
            <Tabs defaultValue="chatbots" className="w-full">
              <TabsList className="grid grid-cols-3 mb-8">
                <TabsTrigger value="chatbots">My Chatbots</TabsTrigger>
                <TabsTrigger value="profile">Profile</TabsTrigger>
                <TabsTrigger value="analytics">Analytics</TabsTrigger>
              </TabsList>
              
              {/* Chatbots Tab */}
              <TabsContent value="chatbots" className="space-y-6">
                <div className="flex justify-between items-center">
                  <h2 className="text-2xl font-semibold">Manage Your Chatbots</h2>
                  <Link href="/chatbots/create">
                    <Button className="bg-blue-600 hover:bg-blue-700">Create New Chatbot</Button>
                  </Link>
                </div>
                
                {userChatbots.length > 0 ? (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {userChatbots.map((chatbot: any) => (
                      <Card key={chatbot.id} className="bg-gray-800/50 backdrop-blur-sm border-gray-700 overflow-hidden">
                        <div className="relative h-40">
                          {chatbot.imageUrl ? (
                            <Image
                              src={chatbot.imageUrl}
                              alt={chatbot.name}
                              fill
                              className="object-cover"
                            />
                          ) : (
                            <div className="w-full h-full bg-gradient-to-br from-blue-600 to-purple-700 flex items-center justify-center">
                              <span className="text-4xl font-bold text-white/70">
                                {chatbot.name.charAt(0).toUpperCase()}
                              </span>
                            </div>
                          )}
                          <div className="absolute top-2 right-2 flex gap-2">
                            <div className={`px-2 py-1 rounded-full text-xs ${
                              chatbot.visibility === "public" 
                                ? "bg-green-900/70 text-green-300" 
                                : "bg-gray-900/70 text-gray-300"
                            }`}>
                              {chatbot.visibility === "public" ? "Public" : "Private"}
                            </div>
                          </div>
                        </div>
                        
                        <CardHeader className="pb-2">
                          <CardTitle className="flex justify-between items-center">
                            <span>{chatbot.name}</span>
                            <div className="flex gap-1">
                              <Link href={`/chatbots/${chatbot.id}/edit`}>
                                <Button variant="ghost" size="sm" className="h-8 w-8 p-0 text-blue-400 hover:text-blue-300 hover:bg-blue-900/20">
                                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                  </svg>
                                </Button>
                              </Link>
                              <form action={`/api/chatbots/${chatbot.id}/delete`} method="POST">
                                <Button variant="ghost" size="sm" className="h-8 w-8 p-0 text-red-400 hover:text-red-300 hover:bg-red-900/20">
                                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                  </svg>
                                </Button>
                              </form>
                            </div>
                          </CardTitle>
                        </CardHeader>
                        
                        <CardContent>
                          <p className="text-sm text-gray-400 mb-4 line-clamp-2 h-10">
                            {chatbot.description || "No description"}
                          </p>
                          
                          <div className="grid grid-cols-2 gap-2 text-xs text-gray-400 mb-4">
                            <div>
                              <span className="block">Created</span>
                              <span className="text-white">{new Date(chatbot.createdAt).toLocaleDateString()}</span>
                            </div>
                            <div>
                              <span className="block">Interactions</span>
                              <span className="text-white">{chatbot.interactions || 0}</span>
                            </div>
                          </div>
                          
                          <div className="flex gap-2">
                            <Link href={`/chatbots/${chatbot.id}`} className="flex-1">
                              <Button variant="outline" className="w-full bg-blue-600/20 border-blue-500/30 hover:bg-blue-600/30 hover:border-blue-500/50 text-blue-400">
                                Chat
                              </Button>
                            </Link>
                            <Link href={`/chatbots/${chatbot.id}/settings`} className="flex-1">
                              <Button variant="outline" className="w-full">
                                Settings
                              </Button>
                            </Link>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                ) : (
                  <div className="bg-gray-800/30 border border-gray-700 rounded-xl p-8 text-center">
                    <div className="w-16 h-16 bg-gray-700/50 rounded-full flex items-center justify-center mx-auto mb-4">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
                      </svg>
                    </div>
                    <h3 className="text-xl font-semibold mb-2">No Chatbots Yet</h3>
                    <p className="text-gray-400 mb-6">You haven't created any chatbots yet. Create your first one to get started!</p>
                    <Link href="/chatbots/create">
                      <Button className="bg-blue-600 hover:bg-blue-700">Create Your First Chatbot</Button>
                    </Link>
                  </div>
                )}
              </TabsContent>
              
              {/* Profile Tab */}
              <TabsContent value="profile" className="space-y-6">
                <h2 className="text-2xl font-semibold">Profile Information</h2>
                
                <Card className="bg-gray-800/50 backdrop-blur-sm border-gray-700">
                  <CardHeader>
                    <CardTitle>Personal Information</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <label className="text-sm text-gray-400">First Name</label>
                        <div className="bg-gray-700/50 rounded-md p-3 mt-1">
                          {kindeUser.given_name || "Not provided"}
                        </div>
                      </div>
                      <div>
                        <label className="text-sm text-gray-400">Last Name</label>
                        <div className="bg-gray-700/50 rounded-md p-3 mt-1">
                          {kindeUser.family_name || "Not provided"}
                        </div>
                      </div>
                      <div>
                        <label className="text-sm text-gray-400">Email</label>
                        <div className="bg-gray-700/50 rounded-md p-3 mt-1">
                          {kindeUser.email}
                        </div>
                      </div>
                      <div>
                        <label className="text-sm text-gray-400">Username</label>
                        <div className="bg-gray-700/50 rounded-md p-3 mt-1">
                          {dbUser?.username || "Not set"}
                        </div>
                      </div>
                    </div>
                    
                    <div className="pt-4">
                      <Button className="bg-blue-600 hover:bg-blue-700">
                        Update Profile
                      </Button>
                    </div>
                  </CardContent>
                </Card>
                
                <Card className="bg-gray-800/50 backdrop-blur-sm border-gray-700">
                  <CardHeader>
                    <CardTitle>Account Information</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <label className="text-sm text-gray-400">Account ID</label>
                        <div className="bg-gray-700/50 rounded-md p-3 mt-1 text-sm font-mono">
                          {kindeUser.id}
                        </div>
                      </div>
                      <div>
                        <label className="text-sm text-gray-400">Tokens Available</label>
                        <div className="bg-gray-700/50 rounded-md p-3 mt-1">
                          {dbUser?.tokens || 0}
                        </div>
                      </div>
                      <div>
                        <label className="text-sm text-gray-400">Account Created</label>
                        <div className="bg-gray-700/50 rounded-md p-3 mt-1">
                          {dbUser?.createdAt ? new Date(dbUser.createdAt).toLocaleString() : "Unknown"}
                        </div>
                      </div>
                      <div>
                        <label className="text-sm text-gray-400">Last Updated</label>
                        <div className="bg-gray-700/50 rounded-md p-3 mt-1">
                          {dbUser?.updatedAt ? new Date(dbUser.updatedAt).toLocaleString() : "Unknown"}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
              
              {/* Analytics Tab */}
              <TabsContent value="analytics" className="space-y-6">
                <h2 className="text-2xl font-semibold">Usage Analytics</h2>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <Card className="bg-gray-800/50 backdrop-blur-sm border-gray-700">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-lg">Total Chatbots</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-3xl font-bold text-blue-400">{userChatbots.length}</div>
                      <p className="text-sm text-gray-400">Across all your creations</p>
                    </CardContent>
                  </Card>
                  
                  <Card className="bg-gray-800/50 backdrop-blur-sm border-gray-700">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-lg">Total Interactions</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-3xl font-bold text-purple-400">
                        {userChatbots.reduce((total: number, chatbot: any) => total + (chatbot.interactions || 0), 0)}
                      </div>
                      <p className="text-sm text-gray-400">Messages exchanged with users</p>
                    </CardContent>
                  </Card>
                  
                  <Card className="bg-gray-800/50 backdrop-blur-sm border-gray-700">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-lg">Tokens Remaining</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-3xl font-bold text-green-400">{dbUser?.tokens || 0}</div>
                      <p className="text-sm text-gray-400">Available for AI interactions</p>
                    </CardContent>
                  </Card>
                </div>
                
                <Card className="bg-gray-800/50 backdrop-blur-sm border-gray-700">
                  <CardHeader>
                    <CardTitle>Chatbot Performance</CardTitle>
                  </CardHeader>
                  <CardContent>
                    {userChatbots.length > 0 ? (
                      <div className="space-y-4">
                        {userChatbots.map((chatbot: any) => (
                          <div key={chatbot.id} className="flex items-center justify-between p-3 bg-gray-700/30 rounded-lg">
                            <div className="flex items-center gap-3">
                              <div className="w-10 h-10 rounded-full bg-gradient-to-br from-blue-600 to-purple-700 flex items-center justify-center">
                                <span className="text-lg font-bold text-white">
                                  {chatbot.name.charAt(0).toUpperCase()}
                                </span>
                              </div>
                              <div>
                                <h3 className="font-medium">{chatbot.name}</h3>
                                <p className="text-xs text-gray-400">
                                  {chatbot.visibility === "public" ? "Public" : "Private"} • Created {new Date(chatbot.createdAt).toLocaleDateString()}
                                </p>
                              </div>
                            </div>
                            <div className="text-right">
                              <div className="text-xl font-semibold">{chatbot.interactions || 0}</div>
                              <p className="text-xs text-gray-400">interactions</p>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-8 text-gray-400">
                        <p>No chatbot data available yet</p>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </div>
    </div>
  );
} 