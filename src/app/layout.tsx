import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { initializeDatabase } from "@/utils/db-init";
import { KindeClientProvider } from "@/components/providers/KindeClientProvider";
import { AuthProvider } from "./AuthProvider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// Initialize database on server start
if (process.env.NODE_ENV === "production") {
  console.log("Initializing database in development mode");
  initializeDatabase().catch(console.error);
} else {
  console.log("Initializing database in development mode");
  // In development, initialize on each request to handle hot reloading
  const initPromise = initializeDatabase().catch(console.error);
}

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <AuthProvider>
        <body className={`${geistSans.variable} ${geistMono.variable}`}>
          {children}
        </body>
      </AuthProvider>
    </html>
  );
}
